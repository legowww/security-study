spring.jpa:
  database: mysql
  hibernate.dialect: org.hibernate.dialect.MySQL8Dialect
  hibernate.ddl-auto: update
  show-sql: true


spring.datasource:
  hikari.maximum-pool-size: 4
  url: jdbc:mysql://localhost:3306/security?serverTimezone=Asia/Seoul
  username: cos
  password: cos1234
  driver-class-name: com.mysql.cj.jdbc.Driver


spring.security:
    oauth2:
      client:
        registration:
          google: # /oauth2/authorization/google
            client-id: 398583905997-fogr6e2n9edscmqqdmvgba4hjka8l9f5.apps.googleusercontent.com
            client-secret: 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
            scope:
              - email
              - profile
#            redirect-uri: http://localhost:8080/login/oauth2/code/google 고정값

          naver:
            client-id: rOkx5vvVB9_39yMOr8aF
            client-secret: AhitdmBRpe #공식문서에 없으면 사용하지 않아도 된다. ex) 카카오
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver

        provider:
          naver:
            # <a th:href="@{/oauth2/authorization/naver}">네이버 로그인</a> 클릭하면 authorization-uri 으로 요청된다. 이건 규칙이다.
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response #회원 정보를 json 으로 받는데 response 라는 이름으로 리턴, 이 리턴값이
                                          #loadUser() 에서 사용하는 객체인 oAuth2User.getAttributes() 에 넣어진다.
                                          #카카오의 경우 properties

